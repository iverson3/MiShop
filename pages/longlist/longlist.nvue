<template>
	<view>
		<div class="flex-row pl-3 pt-3"><text @click="phoneCall">扫描结果： </text><text class="text-danger" @click="copyScanInfo">{{ scanInfo }}</text></div>
		<div class="w-100 flex-row j-center a-center p-5">
			<div class="flex-1 p-2 bg-secondary rounded j-center a-center" @click="startScan"><text class="text-white pt-1">扫描二维码</text></div>
			<div v-if="isScaning" class="flex-1" @click="endScan">取消扫描</div>
		</div>
		
		<div class="w-100 flex-row j-center a-center px-5">
			<div class="flex-1 p-3 rounded bg-secondary j-center a-center mx-2" @click="startPhoto"><text class="text-danger">开始拍照</text></div>
			<div class="flex-1 p-3 rounded bg-secondary j-center a-center mx-2" @click="startVideo"><text class="text-danger">开始录像</text></div>
		</div>
		<div>
			<image style="width:200px;height:200px" :src="imageUrl"></image>
			<!-- <video v-if="videoUrl != ''" :src="videoUrl" auto-play="true" controls style="width: 500px;height: 300px;"></video> -->
		</div>
		
		<cover-view v-if="showPlayer" @click="closeVideo" style="position: fixed; bottom: 440px; right:80px; background-color: white;">关闭</cover-view>
		
		
		
		<list :show-scrollbar="false" class="w-100 h-100">
			<template v-if="list.length > 0">
				<!-- 下拉刷新 -->
				<refresh style="height: 80px;" 
				class="w-100 flex-row j-center a-center"
				@refresh="refreshList" 
				@pullingdown="pullingdown" 
				:display="refreshShow">
					<text class="font-md text-muted">{{ refreshtext }}</text>
				</refresh>
			</template>
			
			<cell v-for="(item,index) in list" :key="index">
				<header v-if="index === 2">
					<div class="col-12 common-list mb-1 flex-row px-5 py-2">
						<image :src="item.titlepic" class="common-list-cover"></image>
						<div class="flex-column">
							<text class="font-md text-dark px-2 py-1 common-list-lines">{{ item.title }}</text>
							<text class="px-2 font text-light-muted common-list-lines">{{ item.desc }}</text>
							<div class="px-2 pt-1 row a-end">
								<price>{{ item.pprice }}</price>
								<text class="line-through text-light-muted ml-1" @click="translate">{{ "指纹识别 head " + item.comment_num }}</text>
							</div>
						</div>
					</div>
				</header>
				<div v-else class="col-12 common-list mb-1 flex-row px-5 py-2">
					<image :src="item.titlepic" class="common-list-cover"></image>
					<div class="flex-column">
						<text class="font-md text-dark px-2 py-1 common-list-lines">{{ item.title }}</text>
						<text class="px-2 font text-light-muted common-list-lines">{{ item.desc }}</text>
						<div class="px-2 pt-1 row a-end">
							<price>{{ item.pprice }}</price>
							<text class="line-through text-light-muted ml-1" @click="translate">{{ "指纹识别 " + item.comment_num }}</text>
						</div>
					</div>
				</div>
			</cell>
			
			<template v-if="list.length > 0">
				<!-- 上拉加载更多 -->
				<loading style="height: 70px;" 
				class="w-100 flex-row j-center a-center"
				@loading="loadmore" 
				:display="loadingShow">
					<text class="font-md text-muted">{{ loadtext }}</text>
				</loading>
			</template>
		</list>
	</view>
</template>

<script>
	import price from '@/components/common/price.nvue'
	
	export default {
		components: {
			price
		},
		data() {
			return {
				list: [],
				page: 1,
				index: 0,
				
				scan: null,
				isScaning: false,
				scanInfo: "",
				
				camera: null,
				imageUrl: "",
				videoUrl: "",
				
				showPlayer: false,
				player: null,
				
				refreshShow: false,
				refreshtext: "下拉刷新",
				loadingShow: false,
				loadtext: "加载更多"
			}
		},
		created: function() {
			this.getData()
			
			
			// plus.globalEvent.addEventListener  添加事件监听器
			// plus.webview.currentWebview().beginPullToRefresh() // 开始下拉刷新
			// plus.webview.currentWebview().draw() // 截屏并绘制为图片
			// 获取当前webview页面 并为其添加事件监听
			// plus.webview.currentWebview().addEventListener('maskClick') // show maskClick hide
			
			/*
			// Events模块管理客户端事件，包括系统事件，如扩展API加载完毕、程序前后台切换等
			"plusready": 扩展API加载完成事件
			"pause": 运行环境从前台切换到后台事件
			"resume": 运行环境从后台切换到前台事件
			"netchange": 设备网络状态变化事件
			"newintent": 新意图事件
			"plusscrollbottom": 页面滚动到底部事件
			"error": 页面加载错误事件
			"background": 应用切换到后台运行事件
			"foreground": 应用切换到前台运行事件
			"trimmemory": 应用需要清理内存事件
			"splashclosed": 应用启动界面已关闭事件
			*/
						   
			// 可监听的系统事件列表 show backbutton netchange volumeChange
			plus.globalEvent.addEventListener('netchange', () => {
				// 获取设备当前的网络状态 plus.networkinfo.getCurrentType() 或 plus.networkinfo.CONNECTION_TYPE
				let netStatus = plus.networkinfo
				switch(netStatus.CONNECTION_TYPE) {
					case netStatus.CONNECTION_NONE:
						plus.nativeUI.toast('没有网络');
						break;
					case netStatus.CONNECTION_WIFI:
						plus.nativeUI.alert('wifi');
						break;
					case netStatus.CONNECTION_CELL4G:
						plus.nativeUI.alert('4G');
						break;
					case netStatus.CONNECTION_CELL3G:
						plus.nativeUI.alert('3G');
						break;
					case netStatus.CONNECTION_CELL2G:
						plus.nativeUI.alert('2G');
						break;
					case netStatus.CONNECTION_ETHERNET:
						plus.nativeUI.alert('有线网络');
						break;
					case netStatus.CONNECTION_UNKNOW:
						plus.nativeUI.alert('网络状态未知');
						break;
					default:
						plus.nativeUI.alert('网络状态未知');
						break;
				}
			})
			
			
			// 监听页面的返回键点击
			plus.key.addEventListener('backbutton', () => {
				// plus.nativeUI.confirm('确定退出页面么？', (res) => {
				// 	console.log(res);
				// })
				
				this.camera = null
				if (this.scan) {
					this.endScan()
					// 没效果
					// plus.key.removeEventListener('backbutton', ()=>{}, false)
				}
			}, false)
			
			
			// plus.geolocation.watchPosition()  监听设备位置变化
			// 获取设备当前定位信息  uni.getLocation()
			plus.geolocation.getCurrentPosition((res) => {
				console.log(res);
				console.log(res.address.city);
			}, (err) => {
				console.log(err);
			})
			
		},
		methods: {
			phoneCall: function() {
				// 拨打电话
				uni.makePhoneCall({
					phoneNumber: "15220067792",
					success: (res) => {
						console.log(res);
					},
					fail: (err) => {
						console.log(err);
					}
				})
			},
			copyScanInfo: function() {
				// 使手机发生振动
				// iOS上只有长震动，没有短震动
				// iOS上需要手机设置“打开响铃时震动”或“静音时震动”，否则无法震动
				uni.vibrateShort({
					success() {}
				})
				
				// 设置系统剪贴板的内容
				uni.setClipboardData({
					data: this.scanInfo,
					success() {}
				})
				// uni.hideToast()
				
				// 获取系统剪贴板内容
				// uni.getClipboardData({
				// 	success: (res) => {
				// 		plus.nativeUI.alert(res.data)
				// 	}
				// })
			},
			
			
			startPhoto: function() {
				this.camera = plus.camera.getCamera(2)
				
				this.camera.captureImage((res) => {
					console.log(res);
					this.imageUrl = res
					this.camera = null
				}, (err) => {
					console.log(err);
					if (err.message == 'cancel') {
						plus.nativeUI.alert('您取消了拍照')
					}
					this.camera = null
				})
			},
			startVideo: function() {
				this.camera = plus.camera.getCamera(1)
				
				console.log(this.camera.supportedVideoFormats);     // mp4
				console.log(this.camera.supportedVideoResolutions); // 640*480,1280*720,960*540
				
				this.camera.startVideoCapture((res) => {
					console.log(res);
					// 需要转化为平台绝对路径  
					// plus.io.convertLocalFileSystemURL()
					// plus.io.convertAbsoluteFileSystem()
					let path = plus.io.convertLocalFileSystemURL(res)
					console.log(path);
					this.player = null
					this.player = plus.video.createVideoPlayer('videoplayer1', {
									src: res,
									bottom: '50px',
									right: '30px',
									width: '200px',
									height: '200px',
									position: 'static',
									
									controls: true,
									'show-progress': false,
									'show-play-btn': false,
									'direction': 0,
									'enable-danmu': true,
									'danmu-btn': true,
									'danmu-list': [
										{
											text: "centent1111",
											color: "#000",
											time: 1
										},
										{
											text: "centent2222",
											color: "#000",
											time: 3
										}
									]
								});
					plus.webview.currentWebview().append(this.player);
					this.showPlayer = true
					
					// 监听视频播放器的全屏切换
					this.player.addEventListener("fullscreenchange", (res) => {
						console.log(res);
						this.showPlayer = false
						if (res.detail.fullScreen) {
							// 全屏
							this.player.setStyles({
								'show-progress': true,
								'show-play-btn': true
							})
						} else {
							// 退出全屏
							this.player.setStyles({
								'show-progress': false,
								'show-play-btn': false
							})
						}
						this.$nextTick(() => {
							this.showPlayer = true
						})
					})
					
					// this.videoUrl = path
					this.camera = null
				}, (err) => {
					console.log(err);
					if (err.message == 'cancel') {
						plus.nativeUI.alert('您取消了视频录制')
					}
					this.camera = null
				}, {
					index: "1",       // 1-主摄像头 2-辅摄像头
					format: "mp4", 
					videoMaximumDuration: 10,  // 视频拍摄的最大时长限制
					resolution: "400*800"    // 视频或照片的分辨率
				})
			},
			closeVideo: function() {
				if (!this.player) return
				plus.webview.currentWebview().remove(this.player)
				this.player.close()
				this.player = null
				this.showPlayer = false
			},
			
			
			startScan: function() {
				
				// 监听网络状态变化
				// uni.onNetworkStatusChange(CALLBACK)
				
				// uni-app 设备API
				// 调起客户端扫码界面
				uni.scanCode({
					scanType: ["qrCode", "barCode"],
					onlyFromCamera: false,
					success: (res) => {
						console.log(res);
						this.scanInfo = res.result
					},
					fail: (err) => {
						console.log(err);
						this.scanInfo = "扫码失败"
					}
				})
				return
				
				
				if (this.scan) return
				// Barcode模块管理条码（一维码和二维码）扫描识别，支持常见的一维码（如EAN13码）及二维码（如QR码）
				// 通过调用设备的摄像头对条码进行扫描识别，扫描到条码后进行解码并返回码数据内容及码类型
				// plus.barcode.getBarcodeById('abcid')
				this.scan = plus.barcode.create('abcid', [plus.barcode.QR, plus.barcode.EAN13], {
					top:'0px',
					left:'0px',
					width: '100%',
					height: '100%',
					position: 'static'
				})
				plus.webview.currentWebview().append(this.scan)
				this.scan.onmarked = this.onmarked
				this.scan.onerror = this.onerror
				this.scan.start()
				this.isScaning = true
			},
			endScan: function() {
				if (!this.scan && !this.isScaning) return
				this.scan.close()
				this.scan = null
				this.isScaning = false
			},
			onmarked: function(type, result, file) {
				console.log(type, result, file);
				this.endScan()
				this.scanInfo = result
			},
			onerror: function(err) {
				console.log(err);
				this.endScan()
				this.scanInfo = "扫码失败"
			},
			
			
			// Native.js for iOS封装一条通过JS语法直接调用Native Objective-C接口通道
			// 通过plus.ios可调用几乎所有的系统API
			translate: function() {
				// plus.bluetooth.startBluetoothDevicesDiscovery()
				// plus.io.getVideoInfo()
				// plus.ios.invoke()
				
				// 获取当前设备的信息   plus.os.name 也可以获取
				let platform = uni.getSystemInfoSync().platform
				let info = "我和我的祖国 listen carefully"
				
				if (platform == "ios") {
					// 调用ios的文字转语音
					let AVSpeechSynthesizer = plus.ios.importClass("AVSpeechSynthesizer")
					let speech = new AVSpeechSynthesizer()
					
					let AVSpeechUtterance = plus.ios.importClass("AVSpeechUtterance")
					let utterance = AVSpeechUtterance.speechUtteranceWithString(info)
					
					// 设置语速
					utterance.plusSetAttribute("rate", 0.5)
					speech.speakUtterance(utterance)
					
				} else if (platform == "android") {
					// 通过以下方法获取内存信息
					let Context = plus.android.importClass("android.content.Context");
					let ActivityManager = plus.android.importClass("android.app.ActivityManager");
					let mi = new ActivityManager.MemoryInfo();
					let activityService = plus.android.runtimeMainActivity().getSystemService(Context.ACTIVITY_SERVICE);
					activityService.getMemoryInfo(mi);
					// 获取mi对象的availMem属性值
					let memoryInfo = plus.android.getAttribute(mi, "availMem");
					console.log(memoryInfo);
				}
				
				
				// #ifdef APP-PLUS
				// 指纹识别相关html5+ api
				let isSupport = plus.fingerprint.isSupport()  // 当前设备是否支持指纹识别
				let isKeyguardSecure = plus.fingerprint.isKeyguardSecure() // 当前设备是否设置密码锁屏
				let isEnrolled = plus.fingerprint.isEnrolledFingerprints() // 当前设备是否已经录入指纹
				if (isSupport && isKeyguardSecure && isEnrolled) {
					// uni.showToast({title: '支持指纹识别', icon: 'none'});
					
					// Android平台弹出等待提示框  IOS平台不需要
					if ('Android' == plus.os.name) {
						plus.nativeUI.showWaiting('指纹识别中...');
					}
					// 进行指纹识别
					plus.fingerprint.authenticate((res) => {
						plus.nativeUI.closeWaiting();// 兼容Android平台关闭等待框
						uni.showToast({title: '识别成功', icon: "success"});
					}, (e) => {
						switch(e.code) {
							case e.AUTHENTICATE_MISMATCH:
								plus.nativeUI.toast('指纹匹配失败，请重新输入');
								break;
							case e.AUTHENTICATE_OVERLIMIT:
								plus.nativeUI.closeWaiting();//兼容Android平台关闭等待框
								plus.nativeUI.alert('指纹识别失败次数超出限制，请使用其它方式进行认证');
								break;
							default:
								plus.nativeUI.closeWaiting();//兼容Android平台关闭等待框
								plus.nativeUI.alert('指纹识别失败('+e.code+')，请重试');
								break;
						}
								
						// plus.nativeUI.closeWaiting();// 兼容Android平台关闭等待框
						// uni.showToast({title: '抱歉，识别失败', icon: "none"});
					})
					
				} else {
					uni.showToast({title: '抱歉，无法进行指纹识别', icon: 'none'});
				}
				// #endif
				
			},
			
			
			getData() {
				let data = []
				for (let i = this.index + 1; i <= this.index + 50; i++) {
					data.push({
						id: i,
						title: "title title title  " + i,
						titlepic: "https://yanxuan-item.nosdn.127.net/4c536c4ea486f8d5c8a172bfaaf5b680.png",
						desc: "天鹅绒面，丝绒时髦高级感 " + i,
						pprice: "200.00",
						comment_num: i,
						good_num: i + "%"
					})
				}
				this.index = this.index + 50
				this.list = [...this.list, ...data]
				this.page = this.page + 1
				
				console.log('-------------');
				console.log(this.list.length);
			},
			
			loadmore: function() {
				if (this.loadingShow) return
				this.loadingShow = true
				this.loadtext = "加载中..."
				
				this.getData()
				
				this.loadingShow = false
				this.loadtext = "加载更多"
			},
			
			pullingdown: function(e) {
				// 当下拉高度超过某个值 则提示可进行刷新
				if (e.pullingDistance > e.viewHeight) {
					this.refreshtext = "释放就能刷新"
				} else {
					this.refreshtext = "下拉刷新"
				}
			},
			refreshList: function() {
				if (this.refreshShow === 'show') return
				this.refreshShow = 'show'
				this.refreshtext = "正在刷新中..."
				
				this.index = 0
				this.page = 1
				this.list = []
				this.getData()
				
				this.refreshtext = "下拉刷新"
				// 这里必须使用$nextTick() 才能隐藏"下拉刷新"这个提示文字
				this.$nextTick(() => {
					this.refreshShow = 'hide'
				})
			}
			
		}
	}
</script>

<!-- 引入nvue专用的公共UI基础库 -->
<style src="@/common/zcm-main-nvue.css"></style>
<style>
.common-list {
	padding-left: 2.5px;
	padding-right: 2.5px;
}
.common-list-cover {
	width: 200px;
	height: 200px;
}
.common-list-lines {
	lines: 1;
}
</style>

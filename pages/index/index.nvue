<template>
	<div>
		
		<template v-if="initing">
			<view class="w-100 j-center a-center" style="padding-top: 150px;">
				<text class="font-md text-light-muted">首页加载中...</text>
			</view>
		</template>
		<template v-if="!initing && tabBars.length === 0">
			<view class="w-100 j-center a-center" style="padding-top: 300px;">
				<text class="font-md text-light-muted">首页初始化失败，请检查网络</text>
			</view>
		</template>
		
		<!-- 横向滚动 顶部选项卡组件 -->
		<mi-tabbar :tabBars="tabBars" :tabIndex="tabIndex" @tabchange="tabChange"></mi-tabbar>
		
		<!-- 横向滚动列表 -->
		<slider class="flex-1" :index="tabIndex" :infinite="false" @change="sliderChange">
			
			<list :show-scrollbar="false" v-for="(list,listIndex) in newsitems" :key="listIndex">
				
				<template v-if="list.data.length > 0">
					<!-- 下拉刷新 -->
					<refresh style="height: 80px;" 
					class="w-100 flex-row j-center a-center"
					@refresh="refresh" 
					@pullingdown="pullingdown" 
					:display="list.refreshShow">
						<text class="font-md text-muted">{{ list.refreshtext }}</text>
					</refresh>
				</template>
				
				<template v-if="list.data.length > 0 && list.firstLoad === 'after'">
				
					<!-- 首页模板 推荐 -->
					<template v-if="tabBars[listIndex].template === 'index'">
						<cell v-for="(listItem,ItemIndex) in list.data" :key="ItemIndex">
							<!-- 轮播图组件 -->
							<mi-slider v-if="listItem.type === 'swiper'" :sliders="listItem.data"></mi-slider>
							
							<template v-if="listItem.type === 'indexnavs'">
								<!-- 图标分类组件 -->
								<mi-index-navs :resdata="listItem.data"></mi-index-navs>
								<!-- 封装全局分割线组件 -->
								<divider></divider>
							</template>
							
							<template v-if="listItem.type === 'threeAdv'">
								<!-- 三图广告组件 -->
								<mi-three-adv :resdata="listItem.data"></mi-three-adv>
								<divider></divider>
							</template>
							
							<!-- 大图广告 -->
							<mi-one-adv v-if="listItem.type === 'oneAdv'" :resdata="listItem.data"></mi-one-adv>
							
							<!-- 公共列表组件 -->
							<div class="row w-100" v-if="listItem.type === 'list'">
								<block v-for="(item,index) in listItem.data" :key="index">
									<common-list :item="item" :index="index"></common-list>
								</block>
							</div>
						</cell>
					</template>
					
					<!-- 专题页 -->
					<template v-else-if="tabBars[listIndex].template === 'special'">
						<cell v-for="(listItem,ItemIndex) in list.data" :key="ItemIndex">
							<!-- 轮播图组件 -->
							<mi-slider v-if="listItem.type === 'swiper'" :sliders="listItem.data"></mi-slider>
							
							<template v-if="listItem.type === 'indexnavs'">
								<!-- 图标分类组件 -->
								<mi-index-navs :resdata="listItem.data"></mi-index-navs>
							</template>
							
							<!-- 公共列表组件 -->
							<div class="w-100" v-if="listItem.type === 'list'">
								<div class="p-2 border-bottom border-top">
									<text class="text-dark font-md font-weight">热卖爆品</text>
								</div>
								<div>
									<div class="row w-100">
										<block v-for="(item,index) in listItem.data" :key="index">
											<common-list :item="item" :index="index"></common-list>
										</block>
									</div>
								</div>
							</div>
						</cell>
					</template>
					
				</template>
				<!-- 数据加载中 -->
				<template v-else-if="list.firstLoad === 'ing'">
					<cell class="w-100 j-center a-center" style="padding-top: 150px;">
						<text class="font-md text-light-muted">数据加载中...</text>
					</cell>
				</template>
				<!-- tab下没有数据 -->
				<template v-else>
					<template v-if="list.refreshShow !== 'show' && !requestFail">
						<cell class="w-100 j-center a-center" style="padding-top: 150px;">
							<text class="font-md text-light-muted">暂无数据</text>
						</cell>
					</template>
					<template v-if="list.data.length === 0 && requestFail">
						<cell class="w-100 j-center a-center" style="padding-top: 150px;">
							<text class="font-md text-light-muted">获取数据失败，请检查网络;</text>
						</cell>
					</template>
				</template>
				
				<template v-if="list.data.length > 0">
					<!-- 上拉加载更多 -->
					<loading style="height: 70px;" 
					class="w-100 flex-row j-center a-center"
					@loading="onLoading" 
					:display="list.loadingShow">
						<text class="font-md text-muted">{{ list.loadmoretext }}</text>
					</loading>
				</template>
			</list>
			
		</slider>
		
	</div>
</template>

<script>
	import miTabbar from "@/components/index/nvue/mi-tabbar.nvue"
	import miSlider from '@/components/index/nvue/mi-slider.nvue'
	import miIndexNavs from '@/components/index/nvue/mi-index-navs.nvue'
	import divider from '@/components/common/divider.nvue'
	import miThreeAdv from '@/components/index/nvue/mi-three-adv.nvue'
	import miOneAdv from '@/components/index/nvue/mi-one-adv.nvue'
	import commonList from '@/components/common/common-list.nvue'
	
	// 获取当前页面
	const currentWebview = plus.webview.currentWebview()
	
	// nvue中无法使用vue全局定义或挂载的一些东西 所以这里需要单独的引入
	import $api from '@/common/lib/request.js';
	
	export default {
		components: {
			miTabbar,
			miSlider,
			miIndexNavs,
			divider,
			miThreeAdv,
			miOneAdv,
			commonList
		},
		data() {
			return {
				newsitems: [],
				
				tabIndex: 0,
				tabBars: [],
				
				initing: true,
				requestFail: false
			}
		},
		
		created: function() {
			// weex编译模式不支持onShow，但熟悉5+的话，可利用监听webview的addEventListener show事件实现onShow效果
			// 添加对当前页面show事件的监听
			// 替代nvue中没有的onShow()生命周期函数
			currentWebview.addEventListener('show', e => {
				console.log('index show')
			})
			
			// 监听导航栏searchinput搜索框点击事件
			uni.onNavigationBarSearchInputClicked(e => {
				uni.navigateTo({
					url: '/pages/search/search'
				})
			})
	
			// 监听导航栏图标按钮点击事件
			uni.onNavigationBarButtonTap(e => {
				console.log(e)
				if (e.index === 0) {
					// 需要验证用户权限的跳转使用 this.navigateTo()  
					// 不需要验证用户权限的跳转使用 uni.navigateTo()
					this.navigateTo({
						url: "/pages/msg-list/msg-list"
					})
				} else {
					// 扫一扫
				}
			})
			// 初始化数据
			this.__init()
		},
		beforeDestroy: function() {
			// 移除监听的事件
			currentWebview.removeEventListener('show', e=>{})
		},
		
		methods: {
			__init() {
				// 封装之后的调用方式一
				// $api.get('/index_category/data').then((data) => {
				// 	// 初始化tabbar数据
				// 	this.tabBars = data.category
				// 	// 初始化页面数据
				// 	this.newsitems = this.setNewsItems(data)
				// }).catch((err) => {
				// 	console.log("请求失败")
				// })
				
				// 封装之后的调用方式二
				$api.get('/index_category/data').then(data => {
					this.initing = false
					// 初始化tabbar数据
					this.tabBars = data.category
					// 初始化页面数据
					this.newsitems = this.setNewsItems(data)
				}).catch(err => {
					this.initing = false
				})
			},
			
			// 演示request请求的三种方式
			async __demo() {
				// 请求的第二种方式
				// uni.request({
				// 	url: 'http://ceshi3.dishait.cn/api/index_category/data',
				// 	method: 'GET'
				// }).then(data => {
				// 	let [error, result] = data
				// 	// 请求错误 (比如没有网络)
				// 	if (error) {
				// 		return console.log(error.errMsg)
				// 	}
				// 	// 请求失败
				// 	if (result.statusCode !== 200) {
				// 		return console.log(result.data.msg)
				// 	}
				// 	// 请求成功
				// 	console.log(result.data)
				// })
				
				// 请求的第三种方式 async&await
				let [error, result] = await uni.request({
					url: 'http://ceshi3.dishait.cn/api/index_category/data',
					method: 'GET'
				})
				// 请求错误 (比如没有网络)
				if (error) {
					return console.log(error.errMsg)
				}
				// 请求失败
				if (result.statusCode !== 200) {
					return console.log(result.data.msg)
				}
				// 请求成功
				console.log(result.data)
			},
			
			// 这个方法是由子组件emit触发 然后由父组件(当前组件)调用的 
			tabChange: function(index) {
				console.log('tabChange')
				this.tabIndex = index
			},
			// 监听横向滚动列表的滚动
			sliderChange: function(e) {
				console.log('sliderChange')
				this.tabIndex = e.index
				// 判断当前tab是否已经加载过第一页的数据
				if (this.newsitems[e.index].firstLoad === 'before') {
					// 调用接口 获取对应tab下的第一页数据
					this.addData(e.index)
				}
			},
			
			// 上拉加载事件
			onLoading: function() {
				console.log('上拉加载事件')
				let index = this.tabIndex
				if (this.newsitems[index].loadmoretext === '没有更多了') {
					uni.showToast({title: '没有更多了', icon: 'none'});
					return
				}
				this.newsitems[index].loadingShow = 'show'
				this.newsitems[index].loadmoretext = "加载中..."
				
				// 请求接口 获取下一页数据
				this.addData(index, (res) => {
					if (res) {
						uni.showToast({title: '加载成功', icon: 'none'});
					} else {
						uni.showToast({title: '加载失败', icon: 'none'});
					}
					console.log('xxxxxxxxvvgggvccxx')
					this.newsitems[index].loadingShow = 'hide'
					this.newsitems[index].loadmoretext = "上拉可加载更多"
				})
			},
			
			// 下拉刷新事件
			refresh: function(e) {
				console.log('下拉刷新事件')
				let index = this.tabIndex
				this.newsitems[index].refreshShow = 'show'
				this.newsitems[index].refreshtext = "正在刷新中..."
				
				// 重新从服务器端请求第一页的数据
				// 先清空对应tab下的数据，再在对应的tab下添加新数据
				this.newsitems[index].data = []
				this.addData(index, (res, errInfo) => {
					if (res) {
						uni.showToast({title: '刷新成功', icon: 'none'});
					} else {
						uni.showToast({title: '刷新失败', icon: 'none'});
					}
					this.requestFail = errInfo === 'requestFail'? true : false
					
					this.newsitems[index].refreshtext = "下拉刷新"
					// 这里必须使用$nextTick() 才能隐藏"下拉刷新"这个提示文字
					this.$nextTick(() => {
						this.newsitems[index].refreshShow = 'hide'
					})
				})
			},
			pullingdown: function(e) {
				let index = this.tabIndex
				// 当下拉高度超过某个值 则提示可进行刷新
				if (e.pullingDistance > e.viewHeight) {
					this.newsitems[index].refreshtext = "释放就能刷新"
				} else {
					this.newsitems[index].refreshtext = "下拉刷新"
				}
			},
			
			// 加载更多数据或刷新数据
			async addData(e, callback = false) { // 拿到当前索引e
				let id   = this.tabBars[e].id
				let page = Math.ceil(this.newsitems[e].data.length / 5) + 1;  // api每次返回5条数据
				
				if (page === 1 && this.newsitems[e].refreshShow === 'hide') {
					// 当前tab下的首次数据加载中
					this.newsitems[e].firstLoad = 'ing'
				}
				// 执行api请求
				let data = await $api.get('/index_category/'+ id +'/data/' + page, {}, {}, callback)
				
				if (page === 1 && this.newsitems[e].refreshShow === 'hide') {
					// 当前tab下的首次数据加载完成
					this.newsitems[e].firstLoad = 'after'
				}
				if (data) {
					// 合并数据
					this.newsitems[e].data = [...this.newsitems[e].data, ...data];
					// 执行回调函数
					if (typeof callback === 'function') callback(true)
					
					// api数据接口每次返回5条数据 如果不足5条 则说明没有更多数据了
					this.newsitems[e].loadmoretext = data.length < 5 ? '没有更多了' : '上拉可加载更多';
					
				} else {
					if (typeof callback === 'function') callback(false)
				}
			},
			
			// 初始化页面数据
			setNewsItems(res) {
				let ary = [];
				// 拿到tabbars的长度，根据长度生成页面
				let tablength = this.tabBars.length;
				for (let i = 0; i < tablength; i++) {
					let aryItem = {
						refreshShow: 'hide',
						refreshtext: '下拉刷新',
						loadingShow: 'hide',
						loadmoretext: "上拉可加载更多",
						firstLoad: i === 0 ? 'after' : 'before', // 当前tab是否已完成首次数据加载
						
						data: []
					};
					// 首屏初始化数据
					if(this.tabBars[i].template === 'index'){
						aryItem.data = res.data
					} else if (this.tabBars[i].template === 'special') {
						aryItem.data = []
					} else {
						aryItem.data = []
					}
					ary.push(aryItem);
				}
				return ary;
			}
			
		}
	}
</script>

<!-- 引入nvue专用的公共UI基础库 -->
<style src="@/common/zcm-main-nvue.css"></style>
<style>

</style>
